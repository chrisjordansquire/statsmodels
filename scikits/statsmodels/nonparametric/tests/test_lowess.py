import numpy as np
from numpy.testing import assrt_almost_equal
import scikits.statsmodels.api as sm


class  TestLowess(object):
     
     def test_simple(self):
        
        x = np.arange(20, dtype='float32')
        #standard normal noise
        noise = np.array([-0.76741118, -0.30754369,  
                            0.39950921, -0.46352422, -1.67081778,
                            0.6595567 ,  0.66367639, -2.04388585,  
                            0.8123281 ,  1.45977518,
                            1.21428038,  1.29296866,  0.78028477, 
                            -0.2402853 , -0.21721302,
                            0.24549405,  0.25987014, -0.90709034, 
                            -1.45688216, -0.31780505])        
        y = x + noise
        
        expected_lowess = np.array([[  0.        ,  -0.57193462],
                                   [  1.        ,   0.62553234],
                                   [  2.        ,   1.82237937],
                                   [  3.        ,   3.01896034],
                                   [  4.        ,   4.21355959],
                                   [  5.        ,   5.40489387],
                                   [  6.        ,   6.5914987 ],
                                   [  7.        ,   7.74173625],
                                   [  8.        ,   8.83327576],
                                   [  9.        ,   9.85459236],
                                   [ 10.        ,  10.80612938],
                                   [ 11.        ,  11.72534453],
                                   [ 12.        ,  12.58303985],
                                   [ 13.        ,  13.36203061],
                                   [ 14.        ,  14.0771873 ],
                                   [ 15.        ,  14.78606919],
                                   [ 16.        ,  15.49607016],
                                   [ 17.        ,  16.20707044],
                                   [ 18.        ,  16.91555851],
                                   [ 19.        ,  17.61917705]])


       actual_lowess = sm.lowess(x,y)

       assert_almost_equal(expected_lowess, actual_lowess)

    def test_iter(self):

        x = np.arange(20, dtype='float32')
        #cauchy noise
        noise = np.array([ 1.86299605, -0.10816866,  1.87761229, 
                        -3.63442237,  0.30249022,
                        1.03560416,  0.21163349,  1.14167809, 
                        -0.00368175, -2.08808987,
                        0.13065417, -1.8052207 ,  0.60404596, 
                        -2.30908204,  1.7081412 ,
                        -0.54633243, -0.93107948,  1.79023999,  
                        1.05822445, -1.04530564])
        
        y = x + noise

        expected_lowess_no_iter = np.array([[  0.        ,   0.64178642],
                                           [  1.        ,   1.51828015],
                                           [  2.        ,   2.40024542],
                                           [  3.        ,   3.27940924],
                                           [  4.        ,   4.14353926],
                                           [  5.        ,   4.99431706],
                                           [  6.        ,   5.86278481],
                                           [  7.        ,   6.79966103],
                                           [  8.        ,   7.72507765],
                                           [  9.        ,   8.70874515],
                                           [ 10.        ,   9.63487624],
                                           [ 11.        ,  10.5452841 ],
                                           [ 12.        ,  11.56088363],
                                           [ 13.        ,  12.675888  ],
                                           [ 14.        ,  13.91393556],
                                           [ 15.        ,  15.16035166],
                                           [ 16.        ,  16.41010919],
                                           [ 17.        ,  17.66421921],
                                           [ 18.        ,  18.92800731],
                                           [ 19.        ,  20.20146972]])

        expected_lowess_3_iter = np.array([[  0.        ,   1.3950192 ],
                                           [  1.        ,   2.23043418],
                                           [  2.        ,   3.06044884],
                                           [  3.        ,   3.88560862],
                                           [  4.        ,   4.70576961],
                                           [  5.        ,   5.52306102],
                                           [  6.        ,   6.34997306],
                                           [  7.        ,   7.16576287],
                                           [  8.        ,   7.95818521],
                                           [  9.        ,   8.8394782 ],
                                           [ 10.        ,   9.75256653],
                                           [ 11.        ,  10.66274253],
                                           [ 12.        ,  11.67254089],
                                           [ 13.        ,  12.77241015],
                                           [ 14.        ,  13.99020824],
                                           [ 15.        ,  15.21208341],
                                           [ 16.        ,  16.4355142 ],
                                           [ 17.        ,  17.663231  ],
                                           [ 18.        ,  18.90121084],
                                           [ 19.        ,  20.14975919]])

       actual_lowess_no_iter = lowess(x,y,it=0)
       actual_lowess_3_iter = lowess(x,y,it=3)

       assert_almost_equal(expected_lowess_no_iter, actual_lowess_no_iter)
       assert_almost_equal(expected_lowess_3_iter, actual_lowess_3_iter)

    def test_frac(self)
        
        #linspace from -2*pi to 2*pi with 30 points
        x = np.array([-6.28318531, -5.84986218, 
                        -5.41653906, -4.98321593, -4.54989281,
                        -4.11656968, -3.68324656, -3.24992343, 
                        -2.81660031, -2.38327719,
                        -1.94995406, -1.51663094, -1.08330781, 
                        -0.64998469, -0.21666156,
                        0.21666156,  0.64998469,  1.08330781,  
                        1.51663094,  1.94995406,
                        2.38327719,  2.81660031,  3.24992343,  
                        3.68324656,  4.11656968,
                        4.54989281,  4.98321593,  5.41653906,  
                        5.84986218,  6.28318531],
                        dtype='float32')
        
        #normal noise
        noise = np.array([ 1.62379338, -1.11849371,  1.60085673,  
                            0.41996348,  0.70896754,
                            0.19271408,  0.04972776, -0.22411356,  
                            0.18154882, -0.63651971,
                            0.64942414, -2.26509826,  0.80018964,  
                            0.89826857, -0.09136105,
                            0.80482898,  1.54504686, -1.23734643, 
                            -1.16572754,  0.28027691,
                            -0.85191583,  0.20417445,  0.61034806, 
                            0.68297375,  1.45707167,
                            0.45157072, -1.13669622, -0.08552254, 
                            -0.28368514, -0.17326155])
        
        y = np.sin(x) + noise

        expected_lowess_23 = np.array([[-6.28318548,  1.77953579],
                                        [-5.8498621 ,  1.60159612],
                                        [-5.41653919,  1.42811529],
                                        [-4.98321581,  1.26029967],
                                        [-4.5498929 ,  1.09884765],
                                        [-4.11656952,  0.94398797],
                                        [-3.68324661,  0.79508864],
                                        [-3.24992347,  0.65051571],
                                        [-2.81660032,  0.50750712],
                                        [-2.38327718,  0.36262658],
                                        [-1.94995403,  0.21691769],
                                        [-1.51663089,  0.13796148],
                                        [-1.08330786,  0.08205709],
                                        [-0.64998472,  0.05353248],
                                        [-0.21666156,  0.05577746],
                                        [ 0.21666156,  0.0844615 ],
                                        [ 0.64998472,  0.12758881],
                                        [ 1.08330786,  0.16523586],
                                        [ 1.51663089,  0.18355184],
                                        [ 1.94995403,  0.17416188],
                                        [ 2.38327718,  0.10639292],
                                        [ 2.81660032,  0.03138359],
                                        [ 3.24992347, -0.04383601],
                                        [ 3.68324661, -0.11957204],
                                        [ 4.11656952, -0.19709018],
                                        [ 4.5498929 , -0.27774231],
                                        [ 4.98321581, -0.36292511],
                                        [ 5.41653919, -0.45344725],
                                        [ 5.8498621 , -0.54940887],
                                        [ 6.28318548, -0.65031615]])

        expected_lowess_15 = np.array([[-6.28318548,  1.7302728 ],
                                        [-5.8498621 ,  1.70287089],
                                        [-5.41653919,  1.67007186],
                                        [-4.98321581,  1.72666341],
                                        [-4.5498929 ,  1.37432395],
                                        [-4.11656952,  0.99864912],
                                        [-3.68324661,  0.54768098],
                                        [-3.24992347,  0.08172548],
                                        [-2.81660032, -0.23271878],
                                        [-2.38327718, -0.36701116],
                                        [-1.94995403, -0.35455188],
                                        [-1.51663089, -0.21083156],
                                        [-1.08330786, -0.01104024],
                                        [-0.64998472,  0.14579329],
                                        [-0.21666156,  0.45219716],
                                        [ 0.21666156,  0.35574759],
                                        [ 0.64998472,  0.24935358],
                                        [ 1.08330786,  0.01314597],
                                        [ 1.51663089, -0.17406042],
                                        [ 1.94995403, -0.02802327],
                                        [ 2.38327718,  0.16327137],
                                        [ 2.81660032,  0.29252682],
                                        [ 3.24992347,  0.36874097],
                                        [ 3.68324661,  0.26311789],
                                        [ 4.11656952, -0.02585101],
                                        [ 4.5498929 , -0.30413929],
                                        [ 4.98321581, -0.56526416],
                                        [ 5.41653919, -0.7031438 ],
                                        [ 5.8498621 , -0.81710561],
                                        [ 6.28318548, -0.89923357]])
                                        
        actual_lowess_23 = lowess(x,y,frac=2./3)
        actual_lowess_15 = lowess(x,y,frac=1./5)

        assert_almost_equal(expected_lowess_23, actual_lowess_23)
        assert_almost_equal(exepected_lowess_15, actual_lowess_15)


if __name__ == "__main__":
    import nose
    nose.runmodule(argv=[__file__, '-vvs', '-x', '--pdb'], exit=False)

